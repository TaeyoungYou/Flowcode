** 코드 전체 BNF **
<program> -> Begin Colon EndOfLine <declaration_section> <main_function> <custom_function_section> End SemiColon | ε

** type **
<type> -> Int | Double | String | Boolean

** Declaration BNF **
<declaration_section> -> Declaration Colon EndOfLine <var_declaration> End SemiColon EndOfLine
<var_declaration> -> <var_declaration_line> <var_declaration> | ε
<var_declaration_line> -> <type> <identifier_list> EndOfLine
<identifier_list> -> Identifier <identifier_tail>
<identifier_tail> -> Comma Identifier <identifier_tail> | ε


** function (Main, others) **
<main_function> -> Boolean Main LeftParen <parameter_list> RightParen Colon EndOfLine <statement_list> End SemiColon EndOfLine
<custom_function_section> -> <function_definition> <custom_function_section> | ε
<function_definition> -> <type> Identifier LeftParen <parameter_list> RightParen Colon EndOfLine <statement_list> End SemiColon EndOfLine

** parameter **
<parameter_list> -> <parameter> <parameter_tail> | ε
<parameter> -> <type> Identifier
<parameter_tail> -> Comma <parameter> <parameter_tail> | ε

** statement **
<statement_list> -> <statement> <statement_list> | ε
<statement> -> <identifier_leading_statement>
              | <input_statement>
              | <output_statement>
              | <return_statement>
              | <repeat_statement>

** entry of assignment statement and function call statement **
<identifier_leading_statement> -> Identifier <identifier_statement_tail>
<identifier_statement_tail> -> Assignment <expression> EndOfLine
                              | Colon <argument_list> SemiColon EndOfLine

** <if_statement> <<elif_statement> <else_statement> <comment> **

** expression statement **
<expression> -> <mul_expre> <add_expre_tail>
<add_expre_tail> -> Add <mul_expre> <add_expre_tail>
                    | Subtract <mul_expre> <add_expre_tail>
                    | ε

<mul_expre> -> <pow_expre> <mul_expre_tail>
<mul_expre_tail> -> Multiply <pow_expre> <mul_expre_tail>
                    | Divide <pow_expre> <mul_expre_tail>
                    | Modulo <pow_expre> <mul_expre_tail>
                    | ε

<pow_expre> -> <factor> Power <pow_expre> | <factor>

<factor> -> IntLiteral | StringLiteral | DoubleLiteral | LeftParen <expression> RightParen | Identifier | Identifier Colon <argument_list> SemiColon

** input statement **
<input_statement> -> Input Colon <identifier_list> SemiColon EndOfLine

** output statement **
<output_statement> -> Output Colon <output_target> SemiColon EndOfLine
<output_target> -> Identifier | StringLiteral | StringDoubleQuoteLiteral

** return statement **
<return_statement> -> Return <expression> EndOfLine

** repeat statement **
<repeat_statement> -> Check <condition> Colon EndOfLine <repeat_statement_list> Repeat SemiColon EndOfLine
<repeat_statement_list> -> <repeat_statement_line> <repeat_statement_list> | ε
<repeat_statement_line> -> <identifier_leading_statement>
                          | <input_statement>
                          | <output_statement>
                          | <return_statement>
                          | <repeat_statement>
                          | Break EndOfLine
                          | Continue EndOfLine


<condition> -> <bool_term> <bool_expr_tail>
<bool_expr_tail> -> LogicalAnd <bool_term> <bool_expr_tail>
                    | LogicalOr <bool_term> <bool_expr_tail>
                    | ε

<bool_term> -> LogicalNot <basic_bool>
               | <basic_bool>

<basic_bool> -> True
                | False
                | <operand> <compare_op> <operand>
                | LeftParen <bool_term> <bool_expr_tail> RightParen

<operand> -> Identifier
            | IntLiteral
            | DoubleLiteral
            | StringLiteral
            | True
            | False

<compare_op> -> Equal
                | NotEqual
                | LessThan
                | GreaterThan
                | LessOrEqual
                | GreaterOrEqual

** function call statement **
<argument_list> -> <non_call_expression> <argument_tail> | ε
<argument_tail> -> Comma <non_call_expression> <argument_tail> | ε

<non_call_expression> -> <non_call_mul> <add_expre_tail>
<non_call_mul> -> <non_call_pow> <mul_expre_tail>
<non_call_pow> -> <non_call_factor> Power <non_call_pow> | <non_call_factor>
<non_call_factor> -> IntLiteral | StringLiteral | DoubleLiteral | LeftParen <non_call_expression> RightParen | Identifier

